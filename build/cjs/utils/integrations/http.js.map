{"version":3,"file":"http.js","sources":["../../../../src/utils/integrations/http.ts"],"sourcesContent":["// This integration is ported from the Next.JS SDK.\nimport { HttpInstrumentation } from '@opentelemetry/instrumentation-http';\nimport { httpIntegration as originalHttpIntegration } from '@sentry/node';\nimport type { IntegrationFn } from '@sentry/types';\n\nclass RemixHttpIntegration extends HttpInstrumentation {\n  // Instead of the default behavior, we just don't do any wrapping for incoming requests\n  protected _getPatchIncomingRequestFunction(_component: 'http' | 'https') {\n    return (\n      original: (event: string, ...args: unknown[]) => boolean,\n    ): ((this: unknown, event: string, ...args: unknown[]) => boolean) => {\n      return function incomingRequest(this: unknown, event: string, ...args: unknown[]): boolean {\n        return original.apply(this, [event, ...args]);\n      };\n    };\n  }\n}\n\ntype HttpOptions = Parameters<typeof originalHttpIntegration>[0];\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nexport const httpIntegration = ((options: HttpOptions = {}) => {\n  return originalHttpIntegration({\n    ...options,\n    _instrumentation: RemixHttpIntegration,\n  });\n}) satisfies IntegrationFn;\n"],"names":["HttpInstrumentation","originalHttpIntegration"],"mappings":";;;;;AAAA;;AAKA,MAAM,oBAAA,SAA6BA,uCAAoB,CAAA;AACvD;AACA,GAAY,gCAAgC,CAAC,UAAU,EAAoB;AAC3E,IAAI,OAAO;AACX,MAAM,QAAQ;AACd,SAA0E;AAC1E,MAAM,OAAO,SAAS,eAAe,EAAgB,KAAK,EAAU,GAAG,IAAI,EAAsB;AACjG,QAAQ,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC,CAAA;AACrD,OAAO,CAAA;AACP,KAAK,CAAA;AACL,GAAE;AACF,CAAA;;AAIA;AACA;AACA;AACA;AACO,MAAM,eAAgB,IAAG,CAAC,OAAO,GAAgB,EAAE,KAAK;AAC/D,EAAE,OAAOC,oBAAuB,CAAC;AACjC,IAAI,GAAG,OAAO;AACd,IAAI,gBAAgB,EAAE,oBAAoB;AAC1C,GAAG,CAAC,CAAA;AACJ,CAAC,CAAE;;;;"}