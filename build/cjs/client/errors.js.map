{"version":3,"file":"errors.js","sources":["../../../src/client/errors.tsx"],"sourcesContent":["import { captureException } from '@sentry/core';\nimport { isNodeEnv } from '@sentry/utils';\n\nimport { isResponse } from '../utils/vendor/response';\n\n/**\n * Captures an error that is thrown inside a Remix ErrorBoundary.\n *\n * @param error The error to capture.\n * @returns void\n */\nexport function captureRemixErrorBoundaryError(error: unknown): string | undefined {\n  // Server-side errors also appear here without their stacktraces.\n  // So, we only capture client-side runtime errors here.\n  // ErrorResponses that are 5xx errors captured at loader / action level by `captureRemixRouteError` function,\n  // And other server-side errors captured in `handleError` function where stacktraces are available.\n  //\n  // We don't want to capture:\n  // - Response Errors / Objects [They are originated and handled on the server-side]\n  // - SSR Errors [They are originated and handled on the server-side]\n  // - Anything without a stacktrace [Remix trims the stacktrace of the errors that are thrown on the server-side]\n  if (isResponse(error) || isNodeEnv() || !(error instanceof Error)) {\n    return;\n  }\n\n  return captureException(error, {\n    mechanism: {\n      type: 'instrument',\n      handled: false,\n      data: {\n        function: 'ReactError',\n      },\n    },\n  });\n}\n"],"names":["isResponse","isNodeEnv","captureException"],"mappings":";;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,8BAA8B,CAAC,KAAK,EAA+B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAIA,mBAAU,CAAC,KAAK,KAAKC,eAAS,EAAC,IAAK,EAAE,iBAAiB,KAAK,CAAC,EAAE;AACrE,IAAI,OAAM;AACV,GAAE;AACF;AACA,EAAE,OAAOC,qBAAgB,CAAC,KAAK,EAAE;AACjC,IAAI,SAAS,EAAE;AACf,MAAM,IAAI,EAAE,YAAY;AACxB,MAAM,OAAO,EAAE,KAAK;AACpB,MAAM,IAAI,EAAE;AACZ,QAAQ,QAAQ,EAAE,YAAY;AAC9B,OAAO;AACP,KAAK;AACL,GAAG,CAAC,CAAA;AACJ;;;;"}