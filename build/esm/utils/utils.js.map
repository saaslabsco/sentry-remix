{"version":3,"file":"utils.js","sources":["../../../src/utils/utils.ts"],"sourcesContent":["import type { DataFunctionArgs } from '@remix-run/node';\nimport type { Span, TransactionSource } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from './debug-build';\nimport { getRequestMatch, matchServerRoutes } from './vendor/response';\nimport type { ServerRoute, ServerRouteManifest } from './vendor/types';\n\n/**\n *\n */\nexport async function storeFormDataKeys(args: DataFunctionArgs, span: Span): Promise<void> {\n  try {\n    // We clone the request for Remix be able to read the FormData later.\n    const clonedRequest = args.request.clone();\n\n    // This only will return the last name of multiple file uploads in a single FormData entry.\n    // We can switch to `unstable_parseMultipartFormData` when it's stable.\n    // https://remix.run/docs/en/main/utils/parse-multipart-form-data#unstable_parsemultipartformdata\n    const formData = await clonedRequest.formData();\n\n    formData.forEach((value, key) => {\n      span.setAttribute(`remix.action_form_data.${key}`, typeof value === 'string' ? value : '[non-string value]');\n    });\n  } catch (e) {\n    DEBUG_BUILD && logger.warn('Failed to read FormData from request', e);\n  }\n}\n\n/**\n * Get transaction name from routes and url\n */\nexport function getTransactionName(routes: ServerRoute[], url: URL): [string, TransactionSource] {\n  const matches = matchServerRoutes(routes, url.pathname);\n  const match = matches && getRequestMatch(url, matches);\n  return match === null ? [url.pathname, 'url'] : [match.route.id || 'no-route-id', 'route'];\n}\n\n/**\n * Creates routes from the server route manifest\n *\n * @param manifest\n * @param parentId\n */\nexport function createRoutes(manifest: ServerRouteManifest, parentId?: string): ServerRoute[] {\n  return Object.entries(manifest)\n    .filter(([, route]) => route.parentId === parentId)\n    .map(([id, route]) => ({\n      ...route,\n      children: createRoutes(manifest, id),\n    }));\n}\n"],"names":[],"mappings":";;;;AAOA;AACA;AACA;AACO,eAAe,iBAAiB,CAAC,IAAI,EAAoB,IAAI,EAAuB;AAC3F,EAAE,IAAI;AACN;AACA,IAAI,MAAM,gBAAgB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAA;AAC9C;AACA;AACA;AACA;AACA,IAAI,MAAM,WAAW,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAA;AACnD;AACA,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,KAAK;AACrC,MAAM,IAAI,CAAC,YAAY,CAAC,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAA,EAAA,OAAA,KAAA,KAAA,QAAA,GAAA,KAAA,GAAA,oBAAA,CAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA,CAAA,OAAA,CAAA,EAAA;AACA,IAAA,WAAA,IAAA,MAAA,CAAA,IAAA,CAAA,sCAAA,EAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA,SAAA,kBAAA,CAAA,MAAA,EAAA,GAAA,EAAA;AACA,EAAA,MAAA,OAAA,GAAA,iBAAA,CAAA,MAAA,EAAA,GAAA,CAAA,QAAA,CAAA,CAAA;AACA,EAAA,MAAA,KAAA,GAAA,OAAA,IAAA,eAAA,CAAA,GAAA,EAAA,OAAA,CAAA,CAAA;AACA,EAAA,OAAA,KAAA,KAAA,IAAA,GAAA,CAAA,GAAA,CAAA,QAAA,EAAA,KAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,IAAA,aAAA,EAAA,OAAA,CAAA,CAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,YAAA,CAAA,QAAA,EAAA,QAAA,EAAA;AACA,EAAA,OAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA;AACA,KAAA,MAAA,CAAA,CAAA,GAAA,KAAA,CAAA,KAAA,KAAA,CAAA,QAAA,KAAA,QAAA,CAAA;AACA,KAAA,GAAA,CAAA,CAAA,CAAA,EAAA,EAAA,KAAA,CAAA,MAAA;AACA,MAAA,GAAA,KAAA;AACA,MAAA,QAAA,EAAA,YAAA,CAAA,QAAA,EAAA,EAAA,CAAA;AACA,KAAA,CAAA,CAAA,CAAA;AACA;;;;"}